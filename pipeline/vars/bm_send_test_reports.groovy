/*
    Groovy script to publish the report generated by baremetal specific pipeline
    Accepts test results <MAP>, rhbuild <String>, scenarioName <String>,
    rhcephInfo <Map>
    e.g :results = ["StageName1":[suite1: [Result: "Pass", Logs:"path to log"],
                                  suite2: [Result: "PASS", Logs:"path to log"],
                                  suite6: [Result: "PASS", Logs:"path to log"]],
                    "StageName2":[suite3: [Result: "Pass", Logs:"path to log"],
                                  suite4: [Result: "Fail", Logs:"path to log"],
                                  suite5: [Result: "Fail", Logs:"path to log"]],
                    "StageName3":[suite13: [Result: "Pass", Logs:"path to log"]]]

        rhbuild  = 6.0
        scenarioName = Tier-1 Green Field
        rhcephInfo = [
            "repository":"registry-proxy.engineering.redhat.com/rh-osbs/rhceph:ceph-5.3",
            "composes": [
                "rhel-8": "http://download.eng.bos.redhat.com/rhel-8/composes/auto/ceph-5.3-rhel-8/RHCEPH-5.3-RHEL-8-20220926.ci.0",
                "rhel-9": "http://download.eng.bos.redhat.com/rhel-9/composes/auto/ceph-5.3-rhel-9/RHCEPH-5.3-RHEL-9-20220926.ci.0"],
                "ceph-version": "16.2.10-48"
            ]
        ]

*/

def sendEMail(def testResults, def rhBuild, def scenarioName, def rhCephInfo) {
    /*
        Send Email notification mentioning the stages, corresponding
        suites and their execution status
    */
    def body = readFile("pipeline/vars/emailable-report.html")
    def gchatResult = ""

    body += "</table>"
    body += "<body><u><h3>Test Summary</h3></u><br />"
    body += "<p>Logs are available at ${env.BUILD_URL}</p><br />"
    body += "<table>"
    heading = "<tr><th>Stage</th><th>Suite</th><th>Result</th><th>Logs</th></tr>"
    body += heading

    def status = "PASSED"
    for ( stage in testResults ) {
        body += "<tr><td rowspan = \"${stage.value.size()}\">${stage.key}</td>"
        gchatResult+= "\nSTAGE : ${stage.key}"

        for ( suites in stage.value ) {
            res = suites.value["result"]

            body += "<td>${suites.key}</td>"
            body += "<td>${suites.value["result"]}</td>"
            body += "<td>${suites.value["logs"]}</td></tr>"

            gchatResult += "\n\tSuite Name : ${suites.key}"
            gchatResult += "\n\t\tResult : ${suites.value["result"]}"
            gchatResult += "\n\t\tLogs : ${suites.value["logs"]}"

            if (suites.value["result"].toLowerCase() != "pass") {
                status = "FAILED"
            }
        }
        gchatResult += "\n\n"
    }
    body +="</table> </body> </html>"

    def composeUrl = ""
    for (compose in rhCephInfo["composes"]){
        composeUrl += compose.key
        composeUrl += " : " + compose.value
        composeUrl += "<br /><br />"
    }
    def cephVer = rhCephInfo["ceph-version"]
    body += "<h3><u>Test Artifacts</h3></u>"
    body += "<table><tr><td>Composes</td><td>${composeUrl}</td></tr>"
    body += "<td>Ceph version</td><td>${cephVer}</td></tr>"
    body += "<tr><td>Repository</td><td>${rhCephInfo["repository"]}</td></tr>"

    subject = "[UPI]-[${rhBuild}] Test report of ${scenarioName} - ${cephVer} : ${status}"
    toList = "cephci@redhat.com"
    emailext (
        mimeType: 'text/html',
        subject: "${subject}",
        body: "${body}",
        from: "cephci@redhat.com",
        to: "${toList}"
    )
    sendGChatNotification(gchatResult, subject)
}

def sendGChatNotification(def testResults, subject) {
    /*
        Send a GChat notification.
        Plugin used:
            googlechatnotification which allows to post build notifications to a Google
            Chat Messenger groups.
            parameter:
                url: Mandatory String parameter.
                     Single/multiple comma separated HTTP URLs or/and single/multiple
                     comma separated Credential IDs.
                message: Mandatory String parameter.
                         Notification message to be sent.
    */

    def msg= "Run result for ${subject} \n\n ${testResults}"
    googlechatnotification(url: "id:rhcephCIGChatRoom", message: msg)
}
return this;
